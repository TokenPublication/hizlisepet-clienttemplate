/**
 * ReceiptInfo.cs
 * 
 * This file is part of the TokenDotNet namespace which facilitates integration with POS devices
 * through "TokenX Connect (Wired)" or "Integration Hub" payment platforms.
 * 
 * Technology Stack:
 * - Language: C#
 * - Platform: .NET
 * - Project: HizliSepet Client Template
 * 
 * Overview:
 * This code defines the data structures used to represent receipt information retrieved from
 * a payment transaction processed through the POS device. It captures all relevant financial
 * transaction details needed for receipt generation, reporting, and record-keeping.
 * 
 * The receipt data model is organized into two main classes:
 * - ReceiptInfo: Container for the overall receipt information
 * - PaymentItemReceipt: Individual payment items/transactions within a receipt
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TokenDotNet
{
    /**
     * Represents an individual payment transaction item on a receipt.
     * 
     * This class captures detailed information about a specific payment transaction
     * that appears on a receipt, such as the amount, currency, transaction number,
     * batch number, and status.
     */
    internal class PaymentItemReceipt
    {
        /// <summary>The monetary value of the payment transaction</summary>
        public decimal amount { get; set; }
        
        /// <summary>The batch number assigned by the payment processor</summary>
        public int BatchNo { get; set; }
        
        /// <summary>Identifier for the currency used in the transaction (e.g., 949 for TRY)</summary>
        public int currencyId { get; set; }
        
        /// <summary>Human-readable description of the payment transaction</summary>
        public string description { get; set; }
        
        /// <summary>Identifier for the operator/cashier who processed the transaction</summary>
        public int operatorId { get; set; }
        
        /// <summary>Status code indicating the outcome of the payment (e.g., approved, declined)</summary>
        public int status { get; set; }
        
        /// <summary>Transaction number assigned by the payment processor</summary>
        public int TxnNo { get; set; }
        
        /// <summary>Type code indicating the payment method or transaction type</summary>
        public int type { get; set; }
    }

    /**
     * Contains comprehensive information about a payment receipt.
     * 
     * This class represents the complete receipt data returned from the POS device
     * after a payment transaction has been processed. It includes both metadata about
     * the receipt itself and a collection of individual payment items.
     * 
     * This data structure is typically populated from the JSON response of the
     * TokenX Connect or Integration Hub API after a successful payment operation.
     */
    internal class ReceiptInfo
    {
        /// <summary>Unique identifier for the shopping basket/cart associated with this receipt</summary>
        public string basketID { get; set; }
        
        /// <summary>Type of document (e.g., sales receipt, refund receipt, etc.)</summary>
        public int documentType { get; set; }
        
        /// <summary>Identifier for the specific POS terminal instance that processed the payment</summary>
        public string InstanceIdentifier { get; set; }
        
        /// <summary>Identifier for any associated invoice document</summary>
        public string invoiceID { get; set; }
        
        /// <summary>Additional message or notes related to the receipt</summary>
        public string message { get; set; }
        
        /// <summary>Total number of payment items/transactions on this receipt</summary>
        public int paymentCount { get; set; }
        
        /// <summary>Collection of individual payment transactions included on this receipt</summary>
        public List<PaymentItemReceipt> paymentItems { get; set; }
        
        /// <summary>Sequential receipt number generated by the POS system</summary>
        public int receiptNo { get; set; }
        
        /// <summary>Universally Unique Identifier for this receipt</summary>
        public string UUID { get; set; }
        
        /// <summary>Z-report number associated with this receipt for end-of-day reconciliation</summary>
        public int zNo { get; set; }
        
        /// <summary>Overall status code for the receipt (e.g., printed, canceled, etc.)</summary>
        public int status { get; set; }
    }
}
